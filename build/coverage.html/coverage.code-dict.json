{"/home/travis/build/npmtest/node-npmtest-client-sessions/test.js":"/* istanbul instrument in package npmtest_client_sessions */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-client-sessions/lib.npmtest_client_sessions.js":"/* istanbul instrument in package npmtest_client_sessions */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_client_sessions = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_client_sessions = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-client-sessions/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-client-sessions && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_client_sessions */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_client_sessions\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_client_sessions.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_client_sessions.rollup.js'] =\n            local.assetsDict['/assets.npmtest_client_sessions.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_client_sessions.__dirname + '/lib.npmtest_client_sessions.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-client-sessions/node_modules/client-sessions/lib/client-sessions.js":"/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\r\n\r\nconst Cookies = require(\"cookies\");\r\n\r\nconst crypto = require(\"crypto\");\r\nconst util = require(\"util\");\r\n\r\n\r\nconst COOKIE_NAME_SEP = '=';\r\nconst ACTIVE_DURATION = 1000 * 60 * 5;\r\n\r\nconst KDF_ENC = 'cookiesession-encryption';\r\nconst KDF_MAC = 'cookiesession-signature';\r\n\r\n/* map from cipher algorithm to exact key byte length */\r\nconst ENCRYPTION_ALGORITHMS = {\r\n  aes128: 16, // implicit CBC mode\r\n  aes192: 24,\r\n  aes256: 32\r\n};\r\nconst DEFAULT_ENCRYPTION_ALGO = 'aes256';\r\n\r\n/* map from hmac algorithm to _minimum_ key byte length */\r\nconst SIGNATURE_ALGORITHMS = {\r\n  'sha256': 32,\r\n  'sha256-drop128': 32,\r\n  'sha384': 48,\r\n  'sha384-drop192': 48,\r\n  'sha512': 64,\r\n  'sha512-drop256': 64\r\n };\r\nconst DEFAULT_SIGNATURE_ALGO = 'sha256';\r\n\r\nfunction isObject(val) {\r\n  return Object.prototype.toString.call(val) === '[object Object]';\r\n}\r\n\r\nfunction base64urlencode(arg) {\r\n  var s = arg.toString('base64');\r\n  s = s.split('=')[0]; // Remove any trailing '='s\r\n  s = s.replace(/\\+/g, '-'); // 62nd char of encoding\r\n  s = s.replace(/\\//g, '_'); // 63rd char of encoding\r\n  // TODO optimize this; we can do much better\r\n  return s;\r\n}\r\n\r\nfunction base64urldecode(arg) {\r\n  var s = arg;\r\n  s = s.replace(/-/g, '+'); // 62nd char of encoding\r\n  s = s.replace(/_/g, '/'); // 63rd char of encoding\r\n  switch (s.length % 4) { // Pad with trailing '='s\r\n    case 0:\r\n      break; // No pad chars in this case\r\n    case 2:\r\n      s += \"==\";\r\n      break; // Two pad chars\r\n    case 3:\r\n      s += \"=\";\r\n      break; // One pad char\r\n    default:\r\n      throw new Error(\"Illegal base64url string!\");\r\n  }\r\n  return new Buffer(s, 'base64'); // Standard base64 decoder\r\n}\r\n\r\nfunction forceBuffer(binaryOrBuffer) {\r\n  if (Buffer.isBuffer(binaryOrBuffer)) {\r\n    return binaryOrBuffer;\r\n  } else {\r\n    return new Buffer(binaryOrBuffer, 'binary');\r\n  }\r\n}\r\n\r\nfunction deriveKey(master, type) {\r\n  // eventually we want to use HKDF. For now we'll do something simpler.\r\n  var hmac = crypto.createHmac('sha256', master);\r\n  hmac.update(type);\r\n  return forceBuffer(hmac.digest());\r\n}\r\n\r\nfunction setupKeys(opts) {\r\n  // derive two keys, one for signing one for encrypting, from the secret.\r\n  if (!opts.encryptionKey) {\r\n    opts.encryptionKey = deriveKey(opts.secret, KDF_ENC);\r\n  }\r\n\r\n  if (!opts.signatureKey) {\r\n    opts.signatureKey = deriveKey(opts.secret, KDF_MAC);\r\n  }\r\n\r\n  if (!opts.signatureAlgorithm) {\r\n    opts.signatureAlgorithm = DEFAULT_SIGNATURE_ALGO;\r\n  }\r\n\r\n  if (!opts.encryptionAlgorithm) {\r\n    opts.encryptionAlgorithm = DEFAULT_ENCRYPTION_ALGO;\r\n  }\r\n}\r\n\r\nfunction keyConstraints(opts) {\r\n  if (!Buffer.isBuffer(opts.encryptionKey)) {\r\n    throw new Error('encryptionKey must be a Buffer');\r\n  }\r\n  if (!Buffer.isBuffer(opts.signatureKey)) {\r\n    throw new Error('signatureKey must be a Buffer');\r\n  }\r\n\r\n  if (constantTimeEquals(opts.encryptionKey, opts.signatureKey)) {\r\n    throw new Error('Encryption and Signature keys must be different');\r\n  }\r\n\r\n  var encAlgo = opts.encryptionAlgorithm;\r\n  var required = ENCRYPTION_ALGORITHMS[encAlgo];\r\n  if (opts.encryptionKey.length !== required) {\r\n    throw new Error(\r\n      'Encryption Key for '+encAlgo+' must be exactly '+required+' bytes '+\r\n      '('+(required*8)+' bits)'\r\n    );\r\n  }\r\n\r\n  var sigAlgo = opts.signatureAlgorithm;\r\n  var minimum = SIGNATURE_ALGORITHMS[sigAlgo];\r\n  if (opts.signatureKey.length < minimum) {\r\n    throw new Error(\r\n      'Encryption Key for '+sigAlgo+' must be at least '+minimum+' bytes '+\r\n      '('+(minimum*8)+' bits)'\r\n    );\r\n  }\r\n}\r\n\r\nfunction constantTimeEquals(a, b) {\r\n  // Ideally this would be a native function, so it's less sensitive to how the\r\n  // JS engine might optimize.\r\n  if (a.length !== b.length) {\r\n    return false;\r\n  }\r\n  var ret = 0;\r\n  for (var i = 0; i < a.length; i++) {\r\n    ret |= a.readUInt8(i) ^ b.readUInt8(i);\r\n  }\r\n  return ret === 0;\r\n}\r\n\r\n// it's good cryptographic pracitice to not leave buffers with sensitive\r\n// contents hanging around.\r\nfunction zeroBuffer(buf) {\r\n  for (var i = 0; i < buf.length; i++) {\r\n    buf[i] = 0;\r\n  }\r\n  return buf;\r\n}\r\n\r\nfunction hmacInit(algo, key) {\r\n  var match = algo.match(/^([^-]+)(?:-drop(\\d+))?$/);\r\n  var baseAlg = match[1];\r\n  var drop = match[2] ? parseInt(match[2], 10) : 0;\r\n\r\n  var hmacAlg = crypto.createHmac(baseAlg, key);\r\n  var origDigest = hmacAlg.digest;\r\n\r\n  if (drop === 0) {\r\n    // Before 0.10, crypto returns binary-encoded strings. Remove when dropping\r\n    // 0.8 support.\r\n    hmacAlg.digest = function() {\r\n      return forceBuffer(origDigest.call(this));\r\n    };\r\n  } else {\r\n    var N = drop / 8; // bits to bytes\r\n    hmacAlg.digest = function dropN() {\r\n      var result = forceBuffer(origDigest.call(this));\r\n      // Throw away the second half of the 512-bit result, leaving the first\r\n      // 256-bits.\r\n      var truncated = new Buffer(N);\r\n      result.copy(truncated, 0, 0, N);\r\n      zeroBuffer(result);\r\n      return truncated;\r\n    };\r\n  }\r\n\r\n  return hmacAlg;\r\n}\r\n\r\nfunction computeHmac(opts, iv, ciphertext, duration, createdAt) {\r\n  var hmacAlg = hmacInit(opts.signatureAlgorithm, opts.signatureKey);\r\n\r\n  hmacAlg.update(iv);\r\n  hmacAlg.update(\".\");\r\n  hmacAlg.update(ciphertext);\r\n  hmacAlg.update(\".\");\r\n  hmacAlg.update(createdAt.toString());\r\n  hmacAlg.update(\".\");\r\n  hmacAlg.update(duration.toString());\r\n\r\n  return hmacAlg.digest();\r\n}\r\n\r\nfunction encode(opts, content, duration, createdAt){\r\n  // format will be:\r\n  // iv.ciphertext.createdAt.duration.hmac\r\n\r\n  if (!opts.cookieName) {\r\n    throw new Error('cookieName option required');\r\n  } else if (String(opts.cookieName).indexOf(COOKIE_NAME_SEP) !== -1) {\r\n    throw new Error('cookieName cannot include \"=\"');\r\n  }\r\n\r\n  setupKeys(opts);\r\n\r\n  duration = duration || 24*60*60*1000;\r\n  createdAt = createdAt || new Date().getTime();\r\n\r\n  // generate iv\r\n  var iv = crypto.randomBytes(16);\r\n\r\n  // encrypt with encryption key\r\n  var plaintext = new Buffer(\r\n    opts.cookieName + COOKIE_NAME_SEP + JSON.stringify(content),\r\n    'utf8'\r\n  );\r\n  var cipher = crypto.createCipheriv(\r\n    opts.encryptionAlgorithm,\r\n    opts.encryptionKey,\r\n    iv\r\n  );\r\n\r\n  var ciphertextStart = forceBuffer(cipher.update(plaintext));\r\n  zeroBuffer(plaintext);\r\n  var ciphertextEnd = forceBuffer(cipher.final());\r\n  var ciphertext = Buffer.concat([ciphertextStart, ciphertextEnd]);\r\n  zeroBuffer(ciphertextStart);\r\n  zeroBuffer(ciphertextEnd);\r\n\r\n  // hmac it\r\n  var hmac = computeHmac(opts, iv, ciphertext, duration, createdAt);\r\n\r\n  var result = [\r\n    base64urlencode(iv),\r\n    base64urlencode(ciphertext),\r\n    createdAt,\r\n    duration,\r\n    base64urlencode(hmac)\r\n  ].join('.');\r\n\r\n  zeroBuffer(iv);\r\n  zeroBuffer(ciphertext);\r\n  zeroBuffer(hmac);\r\n\r\n  return result;\r\n}\r\n\r\nfunction decode(opts, content) {\r\n  if (!opts.cookieName) {\r\n    throw new Error(\"cookieName option required\");\r\n  }\r\n\r\n  // stop at any time if there's an issue\r\n  var components = content.split(\".\");\r\n  if (components.length !== 5) {\r\n    return;\r\n  }\r\n\r\n  setupKeys(opts);\r\n\r\n  var iv;\r\n  var ciphertext;\r\n  var hmac;\r\n\r\n  try {\r\n    iv = base64urldecode(components[0]);\r\n    ciphertext = base64urldecode(components[1]);\r\n    hmac = base64urldecode(components[4]);\r\n  } catch (ignored) {\r\n    cleanup();\r\n    return;\r\n  }\r\n\r\n  var createdAt = parseInt(components[2], 10);\r\n  var duration = parseInt(components[3], 10);\r\n\r\n  function cleanup() {\r\n    if (iv) {\r\n      zeroBuffer(iv);\r\n    }\r\n\r\n    if (ciphertext) {\r\n      zeroBuffer(ciphertext);\r\n    }\r\n\r\n    if (hmac) {\r\n      zeroBuffer(hmac);\r\n    }\r\n\r\n    if (expectedHmac) { // declared below\r\n      zeroBuffer(expectedHmac);\r\n    }\r\n  }\r\n\r\n  // make sure IV is right length\r\n  if (iv.length !== 16) {\r\n    cleanup();\r\n    return;\r\n  }\r\n\r\n  // check hmac\r\n  var expectedHmac = computeHmac(opts, iv, ciphertext, duration, createdAt);\r\n\r\n  if (!constantTimeEquals(hmac, expectedHmac)) {\r\n    cleanup();\r\n    return;\r\n  }\r\n\r\n  // decrypt\r\n  var cipher = crypto.createDecipheriv(\r\n    opts.encryptionAlgorithm,\r\n    opts.encryptionKey,\r\n    iv\r\n  );\r\n  var plaintext = cipher.update(ciphertext, 'binary', 'utf8');\r\n  plaintext += cipher.final('utf8');\r\n\r\n  var cookieName = plaintext.substring(0, plaintext.indexOf(COOKIE_NAME_SEP));\r\n  if (cookieName !== opts.cookieName) {\r\n    cleanup();\r\n    return;\r\n  }\r\n\r\n  var result;\r\n  try {\r\n    result = {\r\n      content: JSON.parse(\r\n        plaintext.substring(plaintext.indexOf(COOKIE_NAME_SEP) + 1)\r\n      ),\r\n      createdAt: createdAt,\r\n      duration: duration\r\n    };\r\n  } catch (ignored) {\r\n  }\r\n\r\n  cleanup();\r\n  return result;\r\n}\r\n\r\n/*\r\n * Session object\r\n *\r\n * this should be implemented with proxies at some point\r\n */\r\nfunction Session(req, res, cookies, opts) {\r\n  this.req = req;\r\n  this.res = res;\r\n  this.cookies = cookies;\r\n  this.opts = opts;\r\n  if (opts.cookie.ephemeral && opts.cookie.maxAge) {\r\n    throw new Error(\"you cannot have an ephemeral cookie with a maxAge.\");\r\n  }\r\n\r\n  this.content = {};\r\n  this.json = JSON.stringify(this._content);\r\n  this.loaded = false;\r\n  this.dirty = false;\r\n\r\n  // no need to initialize it, loadFromCookie will do\r\n  // via reset() or unbox()\r\n  this.createdAt = null;\r\n  this.duration = opts.duration;\r\n  this.activeDuration = opts.activeDuration;\r\n\r\n  // support for maxAge\r\n  if (opts.cookie.maxAge) {\r\n    this.expires = new Date(new Date().getTime() + opts.cookie.maxAge);\r\n  } else {\r\n    this.updateDefaultExpires();\r\n  }\r\n\r\n  // here, we check that the security bits are set correctly\r\n  var secure = (res.socket && res.socket.encrypted) ||\r\n      (req.connection && req.connection.proxySecure);\r\n  if (opts.cookie.secure && !secure) {\r\n    throw new Error(\"you cannot have a secure cookie unless the socket is \" +\r\n        \" secure or you declare req.connection.proxySecure to be true.\");\r\n  }\r\n}\r\n\r\nSession.prototype = {\r\n  updateDefaultExpires: function() {\r\n    if (this.opts.cookie.maxAge) {\r\n      return;\r\n    }\r\n\r\n    if (this.opts.cookie.ephemeral) {\r\n      this.expires = null;\r\n    } else {\r\n      var time = this.createdAt || new Date().getTime();\r\n      // the cookie should expire when it becomes invalid\r\n      // we add an extra second because the conversion to a date\r\n      // truncates the milliseconds\r\n      this.expires = new Date(time + this.duration + 1000);\r\n    }\r\n  },\r\n\r\n  clearContent: function(keysToPreserve) {\r\n    var self = this;\r\n    Object.keys(this._content).forEach(function(k) {\r\n      // exclude this key if it's meant to be preserved\r\n      if (keysToPreserve && (keysToPreserve.indexOf(k) > -1)) {\r\n        return;\r\n      }\r\n\r\n      delete self._content[k];\r\n    });\r\n  },\r\n\r\n  reset: function(keysToPreserve) {\r\n    this.clearContent(keysToPreserve);\r\n    this.createdAt = new Date().getTime();\r\n    this.duration = this.opts.duration;\r\n    this.updateDefaultExpires();\r\n    this.dirty = true;\r\n    this.loaded = true;\r\n  },\r\n\r\n  // alias for `reset` function for compatibility\r\n  destroy: function(){\r\n    this.reset();\r\n  },\r\n\r\n  setDuration: function(newDuration, ephemeral) {\r\n    if (ephemeral && this.opts.cookie.maxAge) {\r\n      throw new Error(\"you cannot have an ephemeral cookie with a maxAge.\");\r\n    }\r\n    if (!this.loaded) {\r\n      this.loadFromCookie(true);\r\n    }\r\n    this.dirty = true;\r\n    this.duration = newDuration;\r\n    this.createdAt = new Date().getTime();\r\n    this.opts.cookie.ephemeral = ephemeral;\r\n    this.updateDefaultExpires();\r\n  },\r\n\r\n  // take the content and do the encrypt-and-sign\r\n  // boxing builds in the concept of createdAt\r\n  box: function() {\r\n    return encode(this.opts, this._content, this.duration, this.createdAt);\r\n  },\r\n\r\n  unbox: function(content) {\r\n    this.clearContent();\r\n\r\n    var unboxed = decode(this.opts, content);\r\n    if (!unboxed) {\r\n      return;\r\n    }\r\n\r\n    var self = this;\r\n\r\n\r\n    Object.keys(unboxed.content).forEach(function(k) {\r\n      self._content[k] = unboxed.content[k];\r\n    });\r\n\r\n    this.createdAt = unboxed.createdAt;\r\n    this.duration = unboxed.duration;\r\n    this.updateDefaultExpires();\r\n  },\r\n\r\n  updateCookie: function() {\r\n    if (this.isDirty()) {\r\n      // support for adding/removing cookie expires\r\n      this.opts.cookie.expires = this.expires;\r\n\r\n      try {\r\n        this.cookies.set(this.opts.cookieName, this.box(), this.opts.cookie);\r\n      } catch (x) {\r\n        // this really shouldn't happen. Right now it happens if secure is set\r\n        // but cookies can't determine that the connection is secure.\r\n      }\r\n    }\r\n  },\r\n\r\n  loadFromCookie: function(forceReset) {\r\n    var cookie = this.cookies.get(this.opts.cookieName);\r\n    if (cookie) {\r\n      this.unbox(cookie);\r\n\r\n      var expiresAt = this.createdAt + this.duration;\r\n      var now = Date.now();\r\n      // should we reset this session?\r\n      if (expiresAt < now) {\r\n        this.reset();\r\n      // if expiration is soon, push back a few minutes to not interrupt user\r\n      } else if (expiresAt - now < this.activeDuration) {\r\n        this.createdAt += this.activeDuration;\r\n        this.dirty = true;\r\n        this.updateDefaultExpires();\r\n      }\r\n    } else {\r\n      if (forceReset) {\r\n        this.reset();\r\n      } else {\r\n        return false; // didn't actually load the cookie\r\n      }\r\n    }\r\n\r\n    this.loaded = true;\r\n    this.json = JSON.stringify(this._content);\r\n    return true;\r\n  },\r\n\r\n  isDirty: function() {\r\n    return this.dirty || (this.json !== JSON.stringify(this._content));\r\n  }\r\n\r\n};\r\n\r\nObject.defineProperty(Session.prototype, 'content', {\r\n  get: function getContent() {\r\n    if (!this.loaded) {\r\n      this.loadFromCookie();\r\n    }\r\n    return this._content;\r\n  },\r\n  set: function setContent(value) {\r\n    Object.defineProperty(value, 'reset', {\r\n      enumerable: false,\r\n      value: this.reset.bind(this)\r\n    });\r\n    Object.defineProperty(value, 'destroy', {\r\n      enumerable: false,\r\n      value: this.destroy.bind(this)\r\n    });\r\n    Object.defineProperty(value, 'setDuration', {\r\n      enumerable: false,\r\n      value: this.setDuration.bind(this)\r\n    });\r\n    this._content = value;\r\n  }\r\n});\r\n\r\nfunction clientSessionFactory(opts) {\r\n  if (!opts) {\r\n    throw new Error(\"no options provided, some are required\");\r\n  }\r\n\r\n  if (!(opts.secret || (opts.encryptionKey && opts.signatureKey))) {\r\n    throw new Error(\"cannot set up sessions without a secret \"+\r\n                    \"or encryptionKey/signatureKey pair\");\r\n  }\r\n\r\n  // defaults\r\n  opts.cookieName = opts.cookieName || \"session_state\";\r\n  opts.duration = opts.duration || 24*60*60*1000;\r\n  opts.activeDuration = 'activeDuration' in opts ?\r\n    opts.activeDuration : ACTIVE_DURATION;\r\n\r\n  var encAlg = opts.encryptionAlgorithm || DEFAULT_ENCRYPTION_ALGO;\r\n  encAlg = encAlg.toLowerCase();\r\n  if (!ENCRYPTION_ALGORITHMS[encAlg]) {\r\n    throw new Error('invalid encryptionAlgorithm, supported are: '+\r\n                    Object.keys(ENCRYPTION_ALGORITHMS).join(', '));\r\n  }\r\n  opts.encryptionAlgorithm = encAlg;\r\n\r\n  var sigAlg = opts.signatureAlgorithm || DEFAULT_SIGNATURE_ALGO;\r\n  sigAlg = sigAlg.toLowerCase();\r\n  if (!SIGNATURE_ALGORITHMS[sigAlg]) {\r\n    throw new Error('invalid signatureAlgorithm, supported are: '+\r\n                    Object.keys(SIGNATURE_ALGORITHMS).join(', '));\r\n  }\r\n  opts.signatureAlgorithm = sigAlg;\r\n\r\n  // set up cookie defaults\r\n  opts.cookie = opts.cookie || {};\r\n  if (typeof opts.cookie.httpOnly === 'undefined') {\r\n    opts.cookie.httpOnly = true;\r\n  }\r\n\r\n  // let's not default to secure just yet,\r\n  // as this depends on the socket being secure,\r\n  // which is tricky to determine if proxied.\r\n  /*\r\n  if (typeof(opts.cookie.secure) == 'undefined')\r\n    opts.cookie.secure = true;\r\n    */\r\n\r\n  setupKeys(opts);\r\n  keyConstraints(opts);\r\n\r\n  const propertyName = opts.requestKey || opts.cookieName;\r\n\r\n  return function clientSession(req, res, next) {\r\n    if (propertyName in req) {\r\n      return next(); //self aware\r\n    }\r\n\r\n    var cookies = new Cookies(req, res);\r\n    var rawSession;\r\n    try {\r\n      rawSession = new Session(req, res, cookies, opts);\r\n    } catch (x) {\r\n      // this happens only if there's a big problem\r\n      process.nextTick(function() {\r\n        next(\"client-sessions error: \" + x.toString());\r\n      });\r\n      return;\r\n    }\r\n\r\n    Object.defineProperty(req, propertyName, {\r\n      get: function getSession() {\r\n        return rawSession.content;\r\n      },\r\n      set: function setSession(value) {\r\n        if (isObject(value)) {\r\n          rawSession.content = value;\r\n        } else {\r\n          throw new TypeError(\"cannot set client-session to non-object\");\r\n        }\r\n      }\r\n    });\r\n\r\n\r\n    var writeHead = res.writeHead;\r\n    res.writeHead = function () {\r\n      rawSession.updateCookie();\r\n      return writeHead.apply(res, arguments);\r\n    };\r\n\r\n    next();\r\n  };\r\n}\r\n\r\nmodule.exports = clientSessionFactory;\r\n\r\n\r\n// Expose encode and decode method\r\n\r\nmodule.exports.util = {\r\n  encode: encode,\r\n  decode: decode,\r\n  computeHmac: computeHmac\r\n};\r\n"}